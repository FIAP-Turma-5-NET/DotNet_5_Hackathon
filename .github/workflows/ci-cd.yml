name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOTNET_VERSION: '9.0.100'
  PROJECT_PATH: 'src/FIAP.HealthMed.API/FIAP.HealthMed.API.csproj'
  K8S_VERSION: 'v1.29.4'

jobs:
  build:
    runs-on: self-hosted

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore --configuration Release

    - name: Publish build output
      run: dotnet publish ${{ env.PROJECT_PATH }} -c Release -o ./publish

    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: build-artifact
        path: ./publish

  test:
    needs: build
    runs-on: self-hosted

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore

    - name: Run unit tests
      run: dotnet test src/tests/FIAP.HealthMed.Tests/FIAP.HealthMed.Tests.csproj --configuration Release

  deploy:
    needs: [test]
    runs-on: self-hosted
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Verificar Docker
      run: |
        if ! docker info > /dev/null 2>&1; then
          echo "Docker não está ativo ou não foi encontrado."
          echo "Certifique-se de que o Docker Desktop está iniciado."
          exit 1
        fi
        echo "Docker detectado com sucesso."

    - name: Configurar e iniciar Minikube
      run: |
        minikube stop
        minikube delete
        minikube start --driver=docker --kubernetes-version=${{ env.K8S_VERSION }} --ports=8080:80,32006:32006,32072:32072,32080:32080 --extra-config=kubelet.housekeeping-interval=10s
        minikube status

    - name: Criar imagens Docker
      run: |
        eval $(minikube -p minikube docker-env)
        
        echo "Criando a imagem da API"
        docker build --target api -f Dockerfile -t fiap/healthmed-api:1.0.0 .
        
        echo "Criando a imagem do Worker"
        docker build --target worker -f Dockerfile -t fiap/healthmed-worker:1.0.0 .
        
        echo "Imagens criadas com sucesso!"

    - name: Aplicar configurações Kubernetes
      run: |
        cd k8s
        
        echo ">> Aplicando namespace"
        kubectl apply -f namespace.yaml
        
        echo ">> Aplicando ConfigMap"
        kubectl apply -f configmap.yaml
        
        echo ">> Aplicando Secrets"
        kubectl apply -f secrets.yaml
        
        echo ">> Aplicando recursos do Banco de Dados (MySQL)"
        kubectl apply -f DataBase/
        
        echo ">> Aplicando recursos de Monitoramento (RabbitMQ)"
        kubectl apply -f Monitoring/
        
        echo ">> Aplicando Service da API"
        kubectl apply -f Application/api-service.yaml
        
        echo ">> Aplicando Deployments da Aplicação (API e Worker)"
        kubectl apply -f Application/api-deployment.yaml
        kubectl apply -f Application/worker-deployment.yaml
        
        echo ">> Aplicando HPAs da Aplicação (API e Worker)"
        kubectl apply -f Application/hpa-api.yaml
        kubectl apply -f Application/hpa-worker.yaml
        
        echo "Todos os recursos foram aplicados com sucesso!"

    - name: Verificar status dos pods
      run: |
        echo "Aguardando pods iniciarem..."
        sleep 30
        kubectl get pods -n healthmed
        kubectl get services -n healthmed
