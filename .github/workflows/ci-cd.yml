# ╔══════════════════════════════════════════════════════════╗
# ║  CI/CD Pipeline – FIAP HealthMed                         ║
# ║  Build, Test, Security Scan, Deploy (staging & prod)     ║
# ╚══════════════════════════════════════════════════════════╝

name: CI/CD Pipeline

# ───────────────────────────────────────────
# Quando executar
# ───────────────────────────────────────────
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# ───────────────────────────────────────────
# Variáveis de ambiente globais
# ───────────────────────────────────────────
env:
  DOTNET_VERSION: '8.0.x'                      # altere p/ '9.0.x' se precisar de preview
  PROJECT_DIR: 'src/FIAP.HealthMed.API'        # pasta do projeto
  PROJECT_FILE: 'FIAP.HealthMed.API.csproj'    # nome do csproj

# ───────────────────────────────────────────
# Job 1 – Build & Test
# ───────────────────────────────────────────
jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Iniciando job
        run: echo "🛠️  Build & Test iniciado!"

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore

      - name: Build (Release)
        run: dotnet build --no-restore --configuration Release

      - name: Test + Coverage
        run: dotnet test --no-build --configuration Release \
                         --collect:"XPlat Code Coverage" \
                         --results-directory ./coverage

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: ./coverage
          retention-days: 7

      - name: Publish (Release)
        run: dotnet publish --no-build --configuration Release \
                             --output ./publish

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: ./publish
          retention-days: 7

      - name: Job finalizado
        run: echo "✅ Build & Test concluído!"

# ───────────────────────────────────────────
# Job 2 – Security Scan (Snyk + SonarCloud)
# ───────────────────────────────────────────
  security-scan:
    needs: build-and-test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET (necessário p/ Snyk)
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Install Snyk CLI
        uses: snyk/actions/setup@master
        with:
          version: latest

      - name: Snyk – dependency vulnerabilities
        working-directory: ${{ env.PROJECT_DIR }}
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          snyk test --severity-threshold=high --file=${{ env.PROJECT_FILE }}

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN:  ${{ secrets.SONAR_TOKEN }}

      - name: Security scan finalizado
        run: echo "🔒 Análise de segurança concluída!"

# ───────────────────────────────────────────
# Job 3 – Deploy Staging
# ───────────────────────────────────────────
  deploy-staging:
    needs: [build-and-test, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: staging

    steps:
      - name: Iniciando deploy para staging
        run: echo "🚀 Deploy (staging) iniciado!"

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: ./publish

      - name: Deploy to staging
        run: |
          echo "Aqui entram seus comandos de deploy (staging)…"
          # ex.: az webapp deploy … OU docker compose up …

      - name: Deploy staging finalizado
        run: echo "✅ Deploy (staging) concluído!"

# ───────────────────────────────────────────
# Job 4 – Deploy Production
# ───────────────────────────────────────────
  deploy-production:
    needs: deploy-staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Iniciando deploy para produção
        run: echo "🚀 Deploy (prod) iniciado!"

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: ./publish

      - name: Deploy to production
        run: |
          echo "Aqui entram seus comandos de deploy (produção)…"
          # ex.: kubectl apply -f k8s/ …

      - name: Deploy produção finalizado
        run: echo "🏁 Deploy (prod) concluído!"
